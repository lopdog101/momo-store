#changes 0.1.2
variables:
  VERSION: "0.1.${CI_PIPELINE_ID}"
  SAST_EXCLUDED_ANALYZERS: "eslint,gosec,nodejs-scan"

stages:
  - build
  - test
  - notify
  - release
  - deploy

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - template: Security/SAST.gitlab-ci.yml  

build-backend-code:
  image: golang:1.18-alpine3.17
  stage: build  
  before_script:
  #/// устанавливаем необходимые пакеты
    - apk add curl tar
  script:
  #/// создаем артефакт приложения и присваиваем ему версию по SemVer
    - cd backend/cmd/api/
    - go build -o momo-backend${VERSION} 
  #/// архивируем артефакт и копируем его в Nexus репозиторий
    - tar czvf momo-store-${VERSION}.tar.gz momo-backend${VERSION}
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file momo-store-${VERSION}.tar.gz ${NEXUS_REPO_BACKEND_URL}/${VERSION}/momo-store-${VERSION}.tar.gz 

build-backend-docker:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  #/// Создаем Docker image приложения и сохраняем его в GitLab Container Registry. Образу присваивается версия по SemVer
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA

#/// запускаем тестирование кода встроенным тестом
go-test-code-job:
  image: golang:1.18-alpine3.17
  stage: test 
  variables:
    CGO_ENABLED: 0
  dependencies:
    - build-backend-code
  script:
    - cd backend
    - go test -v ./...

#/// запускаем тестирование кода средствами Sonarqube
sonarqube-backend-sast:
  stage: test
  dependencies:
    - build-backend-code
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]  
  script:
    - cd backend
    - >
      sonar-scanner 
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.sources=. 
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}

notify:
  stage: notify
  only:
    changes:
    - backend/**/*
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
  # Скорректировать ссылку
    - 'curl -X POST -H "Content-type: application/json" -d "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"Вышла новая версия Backend Momo — $VERSION. Скачать backend можно по ссылке — https://nexus.k8s.praktikum-services.tech/service/rest/repository/browse/sausage-store-LysyukSergey-frontend/sausage-store-front/sausage-store/$VERSION/ \"}" ${TELEGRAM_API}'

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  stage: release
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY    
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest

deploy-k8s:
  stage: deploy
  rules:
    - changes:
        - backend/*
  needs:
    - build-backend-docker
  environment:
    name: production-backend 
  image:
    name: alpine/k8s:1.24.13
  before_script:
    - mkdir ~/.kube
    - echo ${KUBE_CONFIG} > ~/.kube/config 
  script:
    - |
      kubectl config use-context yc-k8s-zonal-admin --namespace=default

      helm repo add nexus ${NEXUS_HELM_URL} --username ${NEXUS_REPO_USER} --password ${NEXUS_REPO_PASS}
      helm repo update
     
      helm upgrade --install momo-store-backend \
      --kube-context yc-k8s-zonal-admin \
      --namespace default \
      --set image.tag="${VERSION}" \      
      --atomic --timeout 15m nexus/momo-store-backend
  after_script:
    - rm ~/.kube/config